<%- include("../partials/header.ejs") %>
<script type="application/ld+json">
{
    "@context": "http://schema.org",
    "@type": "BreadcrumbList",
    "itemListElement": [
        {
            "@type": "ListItem",
            "position": 1,
            "name": "Home",
            "item": "https://discordextremelist.xyz/"
        },
        {
            "@type": "ListItem",
            "position": 2,
            "name": "Search",
            "item": "https://discordextremelist.xyz/search"
        }
    ]
}
</script>
<script type="application/ld+json">
{
    "@context": "http://schema.org",
    "@type": "WebSite",
    "url": "https://discordextremelist.xyz/",
    "potentialAction": {
        "@type": "SearchAction",
        "target": "https://discordextremelist.xyz/search?q={search}",
        "query-input": "required name=search"
    }
}
</script>
<%
    let defaultColour = "#b114ff";
    let foreground = "#ffffff";

    if (req.user) {
        defaultColour = req.user.db.preferences.defaultColour || "#b114ff"
        foreground = req.user.db.preferences.defaultForegroundColour || "#ffffff"
    }
%>
<link href="/css/search.css" type="text/css" media="screen, print" rel="stylesheet" />
<style type="text/css">.is-checkradio[type="checkbox"].is-default.has-background-color+label::before,.is-checkradio[type="checkbox"].is-default.has-background-color+label:before{border-color:transparent !important;background-color:<%= defaultColour %> !important}.is-checkradio[type="checkbox"].is-default:hover:not([disabled])+label::before,.is-checkradio[type="checkbox"].is-default:hover:not([disabled])+label:before{border-color:<%= defaultColour %> !important}.is-checkradio[type="checkbox"].is-default:checked+label::after,.is-checkradio[type="checkbox"].is-default:checked+label:after{border-color:<%= defaultColour %> !important}.is-checkradio[type="checkbox"].is-default:checked.has-background-color+label::before,.is-checkradio[type="checkbox"].is-default:checked.has-background-color+label:before{border-color:transparent !important;background-color:<%= defaultColour %> !important}.is-checkradio[type="checkbox"].is-default:checked.has-background-color+label::after,.is-checkradio[type="checkbox"].is-default:checked.has-background-color+label:after{border-color:<%= foreground %> !important;background-color:<%= defaultColour %> !important}.is-checkradio[type="checkbox"].is-default.is-block:hover:not([disabled])+label::after,.is-checkradio[type="checkbox"].is-default.is-block:hover:not([disabled])+label:after,.is-checkradio[type="checkbox"].is-default.is-block:hover:not([disabled])+label::before,.is-checkradio[type="checkbox"].is-default.is-block:hover:not([disabled])+label:before{border-color:<%= defaultColour %> !important}.is-checkradio[type="checkbox"].is-default.is-block:checked+label{color:<%= foreground %>;border-color:<%= defaultColour %> !important;background:<%= defaultColour %>}.is-checkradio[type="checkbox"].is-default.is-block:checked+label::after,.is-checkradio[type="checkbox"].is-default.is-block:checked+label:after{border-color:<%= foreground %> !important}.is-checkradio[type="checkbox"].is-default.is-block:checked:hover:not([disabled])+label{background:#5e78d5}.is-checkradio[type="checkbox"].is-default.is-block:checked:hover:not([disabled])+label::after,.is-checkradio[type="checkbox"].is-default.is-block:checked:hover:not([disabled])+label:after,.is-checkradio[type="checkbox"].is-default.is-block:checked:hover:not([disabled])+label::before,.is-checkradio[type="checkbox"].is-default.is-block:checked:hover:not([disabled])+label:before{border-color:#f2f2f2 !important}</style><%- include("../partials/nav.ejs") %>
<style type="text/css">.button.is-default.is-outlined{background-color:transparent;border-color:<%= defaultColour %>;color:<%= defaultColour %>}.button.is-default.is-outlined:hover,.button.is-default.is-outlined.is-hovered,.button.is-default.is-outlined:focus,.button.is-default.is-outlined.is-focused{background-color:<%= defaultColour %>;border-color:<%= defaultColour %>;color:<%= foreground %>}.button.is-default.is-outlined.is-loading::after{border-color:transparent transparent <%= defaultColour %> <%= defaultColour %>!important}.button.is-default.is-outlined.is-loading:hover::after,.button.is-default.is-outlined.is-loading.is-hovered::after,.button.is-default.is-outlined.is-loading:focus::after,.button.is-default.is-outlined.is-loading.is-focused::after{border-color:transparent transparent <%= foreground %> <%= foreground %>!important}.button.is-default.is-outlined[disabled],fieldset[disabled] .button.is-default.is-outlined{background-color:transparent;border-color:<%= defaultColour %>;box-shadow:none;color:<%= defaultColour %>}.button.is-default.is-inverted.is-outlined{background-color:transparent;border-color:<%= foreground %>;color:<%= foreground %>}.button.is-default.is-inverted.is-outlined:hover,.button.is-default.is-inverted.is-outlined.is-hovered,.button.is-default.is-inverted.is-outlined:focus,.button.is-default.is-inverted.is-outlined.is-focused{background-color:<%= foreground %>;color:<%= defaultColour %>}.button.is-default.is-inverted.is-outlined.is-loading:hover::after,.button.is-default.is-inverted.is-outlined.is-loading.is-hovered::after,.button.is-default.is-inverted.is-outlined.is-loading:focus::after,.button.is-default.is-inverted.is-outlined.is-loading.is-focused::after{border-color:transparent transparent <%= defaultColour %> <%= defaultColour %>!important}.button.is-default.is-inverted.is-outlined[disabled],fieldset[disabled] .button.is-default.is-inverted.is-outlined{background-color:transparent;border-color:<%= foreground %>;box-shadow:none;color:<%= foreground %>}</style>
<section class="hero is-primary">
    <div class="hero-body">
        <div class="container has-text-centered">
            <br />
            <h1 class="title">
                <span class="icon is-medium iconalign">
                    <i aria-hidden="true" class="fad fa-search has-text-default fa-1x"></i>
                </span>
                <br />
                <span><%= title %></span>
            </h1>
            <h2 class="subtitle"><%= subtitle %></h2>
            <br />
            <p class="control has-icons-left has-icons-right">
                <input class="input is-rounded is-dark" id="searchInput" placeholder="<%= __("page.search.input") %>" type="text">
                <span class="icon is-small is-left">
                    <i class="fas fa-search"></i>
                </span>
            </p>
            <br />
            <div>
                <% if (req.user && req.user.db.rank.mod) { %>
                    <input class="is-checkradio is-circle has-background-color is-default" type="checkbox" id="users" name="users">
                    <label class="has-text-default" for="users"><%= __("common.users") %></label>
                <% } %>
                <input class="is-checkradio is-circle has-background-color is-default" type="checkbox" id="bots" name="bots" checked="checked">
                <label class="has-text-default" for="bots"><%= __("common.bots") %></label>
                <input class="is-checkradio is-circle has-background-color is-default" type="checkbox" id="servers" name="servers" checked="checked">
                <label class="has-text-default" for="servers"><%= __("common.servers") %></label>
                <input class="is-checkradio is-circle has-background-color is-default" type="checkbox" id="templates" name="templates" checked="checked">
                <label class="has-text-default" for="templates"><%= __("common.templates") %></label>
            </div>
            </div>
        </div>
    </div>
</section>
<div class="container is-fluid">
    <div class="section is-fluid" id="display">
        <nav class="pagination is-centered" role="navigation" aria-label="pagination">
            <% if (page > 1) { %>
                <a href="/staff/apps/staff?page=<%= page - 1 %>" class="pagination-previous button is-primary"><i class="fas fa-arrow-left"></i>&nbsp; Previous</a>
            <% } else { %>
                <a class="pagination-previous button is-primary" disabled><i class="fas fa-arrow-left"></i>&nbsp; Previous</a>
            <% } %>
            <% if (page < pages) { %>
                <a href="/staff/apps/staff?page=<%= page + 1 %>" class="pagination-next button is-primary">Next &nbsp;<i class="fas fa-arrow-right"></i></a>
            <% } else { %>
                <a class="pagination-next button is-primary" disabled>Next &nbsp;<i class="fas fa-arrow-right"></i></a>
            <% } %>
        </nav>
        <button class="button is-transparent is-large is-fullwidth is-loading" style="display: none;" id="loader"><%= __("common.loading") %></button>
    </div>
</div>
<script>
    (function () {
        async function search(query, only) {
            return new Promise(resolve => {
                const req = new XMLHttpRequest();
                req.open("POST", "/search");
                req.setRequestHeader("Content-Type", "application/json");
                if (!page) let page = 1;
                req.send(JSON.stringify({ query, only, page }));
                req.onreadystatechange = () => {
                    if (req.readyState === 4) {
                        const nav = document.querySelector("nav.pagination.is-centered");
                        const pageList = document.querySelector("ul.pagination-list");
                        if (pageList.children.length > 0) {
                            while (pageList.firstElementChild && !pageList.firstElementChild.remove());
                        }
                        nav.removeAttribute("style");
                        const results = [];
                        const { data } = JSON.parse(req.responseText);
                        console.log(data)
                        for (let i = 0; i < 18; i++) {
                            const cur = { bots: [], servers: [], users: [], templates: [] };
                            for (const html of data.pages[i]) {
                                if (html.includes("is-user-card")) cur.users.push(html);
                                if (html.includes("is-bot-card")) cur.bots.push(html);
                                if (html.includes("is-server-card")) cur.servers.push(html);
                                if (html.includes("is-template-card")) cur.templates.push(html);
                            }
                            const liTag = document.createElement("li");
                            const aTag = document.createElement("a");
                            aTag.setAttribute("class", "pagination-link"+((i+1)==page?" is-current":""));
                            aTag.innerHTML = (i+1).toString();
                            aTag.setAttribute("aria-label", (i+1).toString());
                            liTag.appendChild(aTag);
                            liTag.addEventListener("click", doPagination);
                            pageList.appendChild(liTag);
                        }
                        doPagination(pageList.children[0]);
                    }
                };
            });
        }
        function toggleSearching() {
            searching = !searching;
            const elem = document.querySelector("button.button.is-transparent.is-large.is-fullwidth.is-loading#loader");
            elem && elem.classList[searching ? "add" : "remove"]("is-loading");
        }
        const div = document.querySelector("div.section#display");
        const input = document.querySelector("input.input.is-rounded.is-dark#searchInput");
        if (input instanceof HTMLInputElement) {
            input.onkeypress = async ({ keyCode, which, shift }) => {
                if ((which || keyCode) === 13 && !shift && !input.value.match(/\s+/)) {
                    if (input.value.match(/gay(\s+)?(men\s+)?.*/i)) window.location.href = "/users/302604426781261824";
                    const c = document.querySelector("input[type='checkbox']#users");
                    const a = document.querySelector("input[type='checkbox']#bots");
                    const b = document.querySelector("input[type='checkbox']#servers");
                    const d = document.querySelector("input[type='checkbox']#templates");
                    const only = !((a && a.checked) && (b && b.checked) && (c && c.checked)) && [
                        c && c.checked && "users",
                        a && a.checked && "bots",
                        b && b.checked && "servers",
                        d && d.checked && "templates",
                    ].filter(a=>!!a);
                    await search(input.value, only || ["bots", "servers", "templates"]);
                }
            }
        }
    })();
</script>
<%- include("../partials/footer.ejs") %>